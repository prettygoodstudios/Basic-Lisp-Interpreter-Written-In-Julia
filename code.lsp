(+ 1 3)
(defun fac (n) (if (eq n 1) 1 (* n (fac ((- n 1))))))
(fac (3))
(defun apply (f n) (f (n)))
(apply (fac 5))
(quote (1 2 3))
(quote ())
(eq (quote ()) nil)
(eq (quote (1)) nil)
(defun fib (n) (if (eq n 1) 1 (if (eq n 0) 1 (+ (fib ((- n 1))) (fib ((- n 2)))))))
(fib (3))
(fib (4))
(fib (5))
(fib (6))
(first (quote (1 2 3 4)))
(rest (quote (1 2 3 4)))
(cons 1 nil)
(cons 1 (cons 2 nil))
(defun len (a) (if (eq a nil) 0 (+ 1 (len ((rest a))))))
(len ((quote (1 2 3 4 5 6))))
(len ((quote (1 2 3 4 5 6 7 8 9 10))))
(defun map (f a) (if (eq a nil) nil (cons (f ((first a))) (map (f (rest a))))))
(map (fib (range (0 8))))
(defun range (start end) (if (eq start end) (cons start nil) (cons start (range ((+ start 1) end)))))
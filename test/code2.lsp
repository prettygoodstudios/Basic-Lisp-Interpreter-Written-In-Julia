(defun reduce (f a i) 
    (if (eq a nil)
        i
        (reduce f (rest a) (f i (first a)))
    )
)
(defun sum (a b) (+ a b))
(defun test (f a b) (f a b))
(reduce + (quote (1 7 3 4 5)) 0)
(test + (test + 10 10) 10)
(defun fibHelper (a) 
    (cons (index a 2)  (cons (+ (index a 1) (index a 2)) nil))
)
(fibHelper (quote (1 1)))
(fibHelper (quote (1 2)))
(fibHelper (quote (2 3)))
(index (juliaReduce fibHelper (juliaRange 0 50) (quote (1 1))) 2)
(defun fibDP (n)
    (index (juliaReduce fibHelper (juliaRange 0 (- n 2)) (quote (1 1))) 2)
)
(fibDP 1)
(fibDP 2)
(fibDP 3)
(fibDP 4)
(fibDP 5)
(fibDP 60)